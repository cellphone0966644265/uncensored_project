# UnOrCensored/run.py
import argparse
import os
import sys
import shutil
import json
from datetime import datetime

# Th√™m c√°c ƒë∆∞·ªùng d·∫´n c·ªßa module v√†o sys.path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(project_root, 'tool'))
sys.path.insert(0, os.path.join(project_root, 'script_AI'))
sys.path.insert(0, os.path.join(project_root, 'script_AI', 'run'))

try:
    import get_file_type
    import get_file_info
    import cut_video
    import split_video
    import video_to_frames
    import frames_to_video
    import merge_video
except ImportError as e:
    print(f"‚ùå L·ªói import: {e}")
    sys.exit(1)


def process_image_pipeline(args, tmp_dir, output_dir):
    """
    Pipeline x·ª≠ l√Ω d√†nh ri√™ng cho file ·∫£nh.
    B·ªè qua c√°c b∆∞·ªõc kh√¥ng c·∫ßn thi·∫øt c·ªßa video.
    """
    print("\n--- B·∫Øt ƒë·∫ßu pipeline x·ª≠ l√Ω ·∫£nh ---")
    
    # B∆∞·ªõc 1: Chu·∫©n h√≥a input. T·∫°o th∆∞ m·ª•c t·∫°m v√† sao ch√©p ·∫£nh v√†o ƒë√≥.
    input_frame_dir = os.path.join(tmp_dir, "input_frames")
    os.makedirs(input_frame_dir)
    ext = os.path.splitext(args.file_path)[1]
    temp_image_path = os.path.join(input_frame_dir, f"frame_00000001{ext}")
    shutil.copy(args.file_path, temp_image_path)
    print(f"üìÑ ƒê√£ chu·∫©n h√≥a input, ·∫£nh ƒë∆∞·ª£c ƒë·∫∑t t·∫°i: {temp_image_path}")

    # B∆∞·ªõc 2: Ch·∫°y module AI
    processed_frames_dir = os.path.join(tmp_dir, "processed_frames")
    os.makedirs(processed_frames_dir)
    ai_module_name = f"run_{args.task_name.replace('mosaic', 'youknow')}"
    try:
        ai_module = __import__(ai_module_name)
        print(f"ü§ñ ƒêang g·ªçi module AI: {ai_module_name}")
        ai_module.main(['--input_path', input_frame_dir, '--output_path', processed_frames_dir])
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng khi ch·∫°y module AI: {e}")
        return

    # B∆∞·ªõc 3: Di chuy·ªÉn th·∫≥ng file k·∫øt qu·∫£ ƒë·∫øn output
    final_filename = f"{os.path.splitext(os.path.basename(args.file_path))[0]}_{args.task_name}{ext}"
    final_output_path = os.path.join(output_dir, final_filename)
    
    processed_files = os.listdir(processed_frames_dir)
    if processed_files:
        processed_image_path = os.path.join(processed_frames_dir, processed_files[0])
        shutil.copy(processed_image_path, final_output_path)
        print(f"‚úÖ ƒê√£ l∆∞u ·∫£nh k·∫øt qu·∫£ t·∫°i: {final_output_path}")
    else:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file k·∫øt qu·∫£ sau khi x·ª≠ l√Ω AI.")

def process_video_pipeline(args, tmp_dir, output_dir):
    """
    Pipeline x·ª≠ l√Ω ƒë·∫ßy ƒë·ªß d√†nh ri√™ng cho file video.
    """
    print("\n--- B·∫Øt ƒë·∫ßu pipeline x·ª≠ l√Ω video ---")
    file_to_process = args.file_path

    # B∆∞·ªõc 1: C·∫Øt video n·∫øu c·∫ßn
    if args.start_time != "00:00:00":
        print("üïí Nh·∫≠n di·ªán tham s·ªë th·ªùi gian, g·ªçi module c·∫Øt video...")
        temp_cut_video_path = os.path.join(tmp_dir, f"temp_cut_{os.path.basename(args.file_path)}")
        cut_result = cut_video.main(['--file_path', file_to_process, '--start_time', args.start_time, '--end_time', args.end_time, '--output_path', temp_cut_video_path])
        if cut_result.get("success"):
            file_to_process = temp_cut_video_path
        else:
            print("‚ö†Ô∏è L·ªói khi c·∫Øt video. S·∫Ω x·ª≠ l√Ω to√†n b·ªô video.")
    
    # B∆∞·ªõc 2: L·∫•y metadata g·ªëc
    metadata = get_file_info.main(['--file_path', args.file_path])
    metadata_path = os.path.join(tmp_dir, 'video_metadata.json')
    with open(metadata_path, 'w') as f:
        json.dump(metadata, f)
        
    # B∆∞·ªõc 3: Chia video th√†nh c√°c chunks
    split_video.main(['--file_path', file_to_process, '--output_dir', tmp_dir])
    video_chunks = sorted([os.path.join(tmp_dir, f) for f in os.listdir(tmp_dir) if f.startswith('chunk_')])
    
    if not video_chunks:
        print("‚ùå L·ªói: Kh√¥ng th·ªÉ chia video th√†nh c√°c chunks.")
        return

    # B∆∞·ªõc 4: X·ª≠ l√Ω t·ª´ng chunk
    processed_chunks = []
    ai_module_name = f"run_{args.task_name.replace('mosaic', 'youknow')}"
    try:
        ai_module = __import__(ai_module_name)
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i module AI '{ai_module_name}': {e}")
        return

    for i, chunk_path in enumerate(video_chunks):
        print(f"\n--- X·ª≠ l√Ω chunk {i+1}/{len(video_chunks)} ---")
        chunk_process_dir = os.path.join(tmp_dir, f"chunk_{i}_processing")
        os.makedirs(chunk_process_dir)

        frames_result = video_to_frames.main(['--video_path', chunk_path, '--output_dir', chunk_process_dir])
        input_frames_dir = frames_result.get('frames_dir')
        audio_path = frames_result.get('audio_path')
        
        processed_frames_dir = os.path.join(chunk_process_dir, 'processed_frames')
        os.makedirs(processed_frames_dir)
        ai_module.main(['--input_path', input_frames_dir, '--output_path', processed_frames_dir])

        processed_chunk_path = os.path.join(tmp_dir, f"processed_chunk_{i}.mp4")
        frames_to_video.main(['--frames_dir', processed_frames_dir, '--audio_path', audio_path if audio_path and os.path.exists(audio_path) else "",'--output_path', processed_chunk_path,'--metadata_path', metadata_path])
        processed_chunks.append(processed_chunk_path)
        shutil.rmtree(chunk_process_dir)

    # B∆∞·ªõc 5: Gh√©p c√°c chunk ƒë√£ x·ª≠ l√Ω
    final_filename = f"{os.path.splitext(os.path.basename(args.file_path))[0]}_{args.task_name}{os.path.splitext(args.file_path)[1]}"
    final_output_path = os.path.join(output_dir, final_filename)
    merge_video.main(['--chunks_dir', tmp_dir, '--output_path', final_output_path])
    print(f"‚úÖ ƒê√£ l∆∞u video k·∫øt qu·∫£ t·∫°i: {final_output_path}")

def main(args):
    start_time_proc = datetime.now()
    print(f"[{start_time_proc.strftime('%Y-%m-%d %H:%M:%S')}] B·∫Øt ƒë·∫ßu t√°c v·ª• '{args.task_name}' cho file: {args.file_path}")

    # Giai ƒëo·∫°n 1: Ki·ªÉm tra v√† thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
    if not os.path.exists(args.file_path):
        print(f"‚ùå L·ªói: File kh√¥ng t·ªìn t·∫°i t·∫°i '{args.file_path}'")
        return

    output_dir = os.path.join(project_root, 'output')
    tmp_dir = os.path.join(project_root, 'tmp')
    if os.path.exists(tmp_dir): shutil.rmtree(tmp_dir)
    os.makedirs(tmp_dir)

    # Giai ƒëo·∫°n 2: Ph√¢n t√≠ch lo·∫°i file v√† g·ªçi pipeline t∆∞∆°ng ·ª©ng
    file_type = get_file_type.main(['--file_path', args.file_path])['file_type']
    print(f"\nüîç Ph√¢n t√≠ch lo·∫°i file: {file_type}")

    if file_type == 'image':
        process_image_pipeline(args, tmp_dir, output_dir)
    elif file_type == 'video':
        process_video_pipeline(args, tmp_dir, output_dir)
    else:
        print(f"‚ùå L·ªói: Lo·∫°i file '{file_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
    
    # Giai ƒëo·∫°n cu·ªëi: Di chuy·ªÉn k·∫øt qu·∫£ n·∫øu c√≥ folder_path
    final_filename = f"{os.path.splitext(os.path.basename(args.file_path))[0]}_{args.task_name}{os.path.splitext(args.file_path)[1]}"
    final_output_path_in_proj = os.path.join(output_dir, final_filename)
    
    if args.folder_path and os.path.isdir(args.folder_path):
        if os.path.exists(final_output_path_in_proj):
            try:
                shutil.move(final_output_path_in_proj, os.path.join(args.folder_path, final_filename))
                print(f"üöö ƒê√£ di chuy·ªÉn file k·∫øt qu·∫£ t·ªõi: {args.folder_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi di chuy·ªÉn file k·∫øt qu·∫£: {e}")

    # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
    if os.path.exists(tmp_dir):
        print("üßπ D·ªçn d·∫πp c√°c file t·∫°m th·ªùi...")
        shutil.rmtree(tmp_dir)
    
    end_time_proc = datetime.now()
    print(f"\n[{end_time_proc.strftime('%Y-%m-%d %H:%M:%S')}] T√°c v·ª• ho√†n th√†nh!")
    print(f"T·ªïng th·ªùi gian th·ª±c thi: {end_time_proc - start_time_proc}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Script ch√≠nh ƒë·ªÉ x·ª≠ l√Ω ·∫£nh/video v·ªõi c√°c t√°c v·ª• AI.", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--file_path', type=str, required=True, help="ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file ·∫£nh ho·∫∑c video c·∫ßn x·ª≠ l√Ω.")
    parser.add_argument('--task_name', type=str, required=True, choices=['add_mosaic', 'clean_mosaic'], help="T√™n t√°c v·ª• c·∫ßn th·ª±c hi·ªán:\n  add_mosaic: Th√™m mosaic v√†o ƒë·ªëi t∆∞·ª£ng.\n  clean_mosaic: L√†m s·∫°ch mosaic tr√™n ƒë·ªëi t∆∞·ª£ng.")
    parser.add_argument('--folder_path', type=str, required=False, help="(T√πy ch·ªçn) ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ƒë·ªÉ l∆∞u k·∫øt qu·∫£ cu·ªëi c√πng.\nN·∫øu kh√¥ng cung c·∫•p, file s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c 'output/' c·ªßa d·ª± √°n.")
    parser.add_argument('--start_time', type=str, default="00:00:00", help="(T√πy ch·ªçn) Th·ªùi gian b·∫Øt ƒë·∫ßu x·ª≠ l√Ω video (format HH:MM:SS). M·∫∑c ƒë·ªãnh l√† 00:00:00.")
    parser.add_argument('--end_time', type=str, default="00:00:00", help="(T√πy ch·ªçn) Th·ªùi gian k·∫øt th√∫c x·ª≠ l√Ω video (format HH:MM:SS). M·∫∑c ƒë·ªãnh l√† '00:00:00' (x·ª≠ l√Ω ƒë·∫øn h·∫øt).")

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
        
    args = parser.parse_args()
    main(args)

